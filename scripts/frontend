pipeline {
  agent any 
  tools {
    jdk 'jdk'
    nodejs 'nodejs'
  }
  environment {
     AWS_ECR_REPO_NAME = credentials('ECR_REPO_FRONT_END')
     REPOSITORY_URL = "$(ACCOUNT_ID).dkr.ecr.$(AWS_DEFAULT_REGION).amazonaws.com/"
     ACCOUNT_ID = ""
  }
  stages {
    stage('cleaning workspace') {
      steps {
         cleanWs()
      }
    }
    stage('checkout from git') {
      steps {
         git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/codewithmuh/three-tier-devsecops-project.git'
      }
    }
    stage('sonarqube Analysis') {
      steps {
        dir('app-code/frontend/notes-frontend') {
          withSonarQubeEnv('sonar-server')  {
            sh '''
                $SCANNER_HOME/bin/sonar-scanner \
                -Dsonar.projectKey=frontend \
                -Dsonar.sources=. \
                -Dsonar.host.url=http://54.212.6.197:9000 \
                -Dsonar.login=sqp_3224bbd77e3d0d815dbc9051c106054c8ce94ec6
          '''
          }
        }
      }
    }
   stage('quality check') {
     steps {
       script {
          waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
       }
     }
   }
   stage('OWASP Dependency-Check scan') {
     steps {
       dir('app-code/frontend/notes-frontend') {
         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dp-check'
         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
       }
      }
    }
    stage('Trivy file scan') {
       steps {
         dir('app-code/frontend/frontend-notes') {
           sh 'trivy fs . > trivy.txt'
         }
       }
    }
   stage('Docker image build') {
     steps {
        scripts {
          dir('app-code/frontend/notes-frontend')  { 
            sh '''
                docker system prune -f
                docker container prune -f 
                docker build -t $(AWS_ECR_REPO_NAME) .
               '''
             }
           }
         }
      }
    stage('ECR image pushing') {
      steps {
        script {
          sh 'aws ecr get-login-password --region $(AWS_DEFAULT_REGION) | docker login --username AWS --password-stdin $(REPOSITORY_URL)'
          sh 'docker tag $(AWS_ECR_REPO_NAME) $(REPOSITORY_URL)$(AWS_ECR_REPO_NAME):$(BUILD_NUMBER)'
          sh 'docker push $(REPOSITORY_URL)$(AWS_ECR_REPO_NAME):$(BUILD_NUMBER)'
        }
      }
   }
   stage('Trivy image scan') {
     steps {
       sh 'trivy image $(REPOSITORY_URL)$(AWS_ECR_REPO_NAME):$(BUILD_NUMBER)'
     }
    }
    stage('Checkout code') {
      steps {
         git branch: 'main', CredentialsId: 'GITHUB' url: 'https://github.com/codewithmuh/three-tier-devsecops-project.git'
      }
  }


          
     



      
  
